{"category":"PromptInput","color":"#0fb1d2","uiflow2":{"jscode":"const CUSTOM_PROMPTINPUT_LANGUAGES = {\n  \"CUSTOM_PROMPTINPUT_INIT\": {\n    \"en\": \"%1 init\"\n  },\n  \"CUSTOM_PROMPTINPUT_PROMPT_INPUT_TEXT\": {\n    \"en\": \"%1 %2\"\n  }\n};\n\nconst initType = 'custom_promptinput_init';\nBlockly.BlockRegExpList['custom_promptinput'] = {\n  regexp: new RegExp(/^custom_promptinput_/),\n  code: \"from PromptInput import PromptInput\",\n  initBlockType: initType,\n  categoryId: 'custom_promptinput',\n}\nBlockly.utils.registerLanguages(CUSTOM_PROMPTINPUT_LANGUAGES)\n\nBlockly.Msg.CUSTOM_PROMPTINPUT_HUE = '#0fb1d2'\nBlockly.Msg.CUSTOM_PROMPTINPUT = 'PromptInput'\n\nBlockly.utils.getcustom_promptinputOptions = function() {\n  let options = [];\n  let list = Blockly.utils.getCustomNameList(initType);\n  for (let i = 0; i < list.length; i++) {\n    let value = list[i];\n    options.push([String(value), String(value)]);\n  }\n  if (options.length === 0) return [\n    ['promptinput_0', 'promptinput_0']\n  ];\n  return options;\n}\n\n\nBlockly.Blocks[\"custom_promptinput_init\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_PROMPTINPUT_INIT,\n      'args0': [\n        // { 'type': 'field_dropdown', 'name': 'NAME', 'options': Blockly.utils.getcustom_promptinputOptions },\n        {\n          'type': 'field_input',\n          'name': 'NAME',\n          'text': 'promptinput_0'\n        },\n\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n      \"tool\": []\n    };\n  }\n}\n\nBlockly.Python[\"custom_promptinput_init\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname} = PromptInput()\\n`\n}\n\nBlockly.Blocks[\"custom_promptinput_prompt_input_text\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_PROMPTINPUT_PROMPT_INPUT_TEXT,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_promptinputOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'prompt'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#0fb1d2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_promptinput_prompt_input_text\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var prompt = Blockly.Python.valueToCode(block, 'prompt', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.prompt_input_text(${prompt})`, Blockly.Python.ORDER_NONE]\n}","toolbox":"\n<category name=\"PromptInput\" colour=\"#0fb1d2\" hidden=\"true\" toolboxitemid=\"custom_promptinput\">\n<title text=\"PromptInput\" docsLink=\"https://github.com/neusmstack\"></title>\n<block type=\"custom_promptinput_init\"/><block type=\"custom_promptinput_prompt_input_text\">\n  <value name=\"prompt\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block>\n</category>\n","toolboxitemid":"custom_promptinput","block_type":["custom_promptinput___init__","custom_promptinput_prompt_input_text"]},"data":{"name":"PromptInput","note":{},"details":{"color":"#0fb1d2","link":"https://github.com/neusmstack","image":"","category":"Custom"},"header":{"file":"","time":"","author":"Neus Morlà Arias","email":"neus.morla.arias@gmail.com","license":""},"assignments":[],"example":"","source_internal":"","source_external":"def prompt_input_text(self, prompt):\n    import time\n    from m5stack import lcd\n    from unit import get\n    import cardkb\n\n    # Inicialitza el teclat\n    cardkb.begin()\n\n    # Mostra el prompt a pantalla\n    lcd.clear()\n    lcd.print(prompt + '\\n', 0, 0)\n\n    input_str = ''\n    while True:\n        key = cardkb.getKey()\n        if key:\n            key_code = ord(key)\n            # ENTER\n            if key_code == 13 or key_code == 10:\n                break\n            # BACKSPACE\n            elif key_code == 8:\n                input_str = input_str[:-1]\n            else:\n                input_str += key\n            lcd.print('\\r' + prompt + '\\n' + input_str + ' ', 0, 0)\n        time.sleep(0.05)\n\n    return input_str","members":[{"name":"__init__","note":{},"label":{"en":"%1 init"},"params":[],"ast_return":{"code":null,"id":"None"},"doc_return":null,"source":"        pass"},{"name":"prompt_input_text","note":{},"label":{"en":"%1 %2"},"params":[{"name":"prompt","type":"str","default":"","field":"","comment":""}],"ast_return":{"code":null,"id":"None"},"doc_return":null,"source":"        pass","return_type":null}],"python_file_name":""},"pyCode":"\"\"\"\nfile     PromptInput\ntime     2025-06-06\nauthor   Neus Morlà Arias\nemail    neus.morla.arias@gmail.com\nlicense  \n\"\"\"\n\nclass PromptInput:\n    \"\"\"\n    note: ''\n    details:\n        color: '#0fb1d2'\n        link: https://github.com/neusmstack\n        image: ''\n        category: Custom\n    example: ''\n    \"\"\"\n\n    def __init__(self) -> None:\n        \"\"\"\n        label:\n            en: '%1 init'\n        \"\"\"\n        pass\n\n    def prompt_input_text(self, prompt: str) -> str:\n        \"\"\"\n        label:\n            en: prompt_input_text %1\n        params:\n            prompt:\n                name: prompt\n                type: str\n        \"\"\"\n        import time\n        from m5stack import lcd\n        from unit import get\n        import cardkb\n\n        cardkb.begin()\n        lcd.clear()\n        lcd.print(prompt + '\\n', 0, 0)\n\n        input_str = ''\n        while True:\n            key = cardkb.getKey()\n            if key:\n                key_code = ord(key)\n                if key_code == 13 or key_code == 10:\n                    break\n                elif key_code == 8:\n                    input_str = input_str[:-1]\n                else:\n                    input_str += key\n                lcd.print('\\r' + prompt + '\\n' + input_str + ' ', 0, 0)\n            time.sleep(0.05)\n\n        return input_str\n","version":"alpha2"}