{"category":"PromptInputNUMBER","color":"#66d20f","uiflow2":{"jscode":"const CUSTOM_PROMPTINPUTNUMBER_LANGUAGES = {\n  \"CUSTOM_PROMPTINPUTNUMBER_INIT\": {\n    \"en\": \"%1 init\"\n  },\n  \"CUSTOM_PROMPTINPUTNUMBER_PROMPT_INPUT_NUMBER\": {\n    \"en\": \"prompt_input_number %1 %2\"\n  }\n};\n\nconst initType = 'custom_promptinputnumber_init';\nBlockly.BlockRegExpList['custom_promptinputnumber'] = {\n  regexp: new RegExp(/^custom_promptinputnumber_/),\n  code: \"from PromptInputNUMBER import PromptInputNUMBER\",\n  initBlockType: initType,\n  categoryId: 'custom_promptinputnumber',\n}\nBlockly.utils.registerLanguages(CUSTOM_PROMPTINPUTNUMBER_LANGUAGES)\n\nBlockly.Msg.CUSTOM_PROMPTINPUTNUMBER_HUE = '#66d20f'\nBlockly.Msg.CUSTOM_PROMPTINPUTNUMBER = 'PromptInputNUMBER'\n\nBlockly.utils.getcustom_promptinputnumberOptions = function() {\n  let options = [];\n  let list = Blockly.utils.getCustomNameList(initType);\n  for (let i = 0; i < list.length; i++) {\n    let value = list[i];\n    options.push([String(value), String(value)]);\n  }\n  if (options.length === 0) return [\n    ['promptinputnumber_0', 'promptinputnumber_0']\n  ];\n  return options;\n}\n\n\nBlockly.Blocks[\"custom_promptinputnumber_init\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_PROMPTINPUTNUMBER_INIT,\n      'args0': [\n        // { 'type': 'field_dropdown', 'name': 'NAME', 'options': Blockly.utils.getcustom_promptinputnumberOptions },\n        {\n          'type': 'field_input',\n          'name': 'NAME',\n          'text': 'promptinputnumber_0'\n        },\n\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#66d20f\",\n      \"tool\": []\n    };\n  }\n}\n\nBlockly.Python[\"custom_promptinputnumber_init\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return `${varname} = PromptInputNUMBER()\\n`\n}\n\nBlockly.Blocks[\"custom_promptinputnumber_prompt_input_number\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_PROMPTINPUTNUMBER_PROMPT_INPUT_NUMBER,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_promptinputnumberOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'prompt'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#66d20f\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_promptinputnumber_prompt_input_number\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var prompt = Blockly.Python.valueToCode(block, 'prompt', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.prompt_input_number(${prompt})`, Blockly.Python.ORDER_NONE]\n}","toolbox":"\n<category name=\"PromptInputNUMBER\" colour=\"#66d20f\" hidden=\"true\" toolboxitemid=\"custom_promptinputnumber\">\n<title text=\"PromptInputNUMBER\" docsLink=\"https://github.com/neusmstack\"></title>\n<block type=\"custom_promptinputnumber_init\"/><block type=\"custom_promptinputnumber_prompt_input_number\">\n  <value name=\"prompt\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block>\n</category>\n","toolboxitemid":"custom_promptinputnumber","block_type":["custom_promptinputnumber___init__","custom_promptinputnumber_prompt_input_number"]},"data":{"name":"PromptInputNUMBER","note":{"en":""},"details":{"color":"#66d20f","link":"https://github.com/neusmstack","image":"","category":"Custom"},"header":{"file":"PromptInputNUMBER","time":"2025-06-06","author":"Neus Morlà Arias","email":"neus.morla.arias@gmail.com","license":"MIT License"},"assignments":[],"example":"","source_internal":"","source_external":"def prompt_input_number_impl(prompt):\n    import time\n    from m5stack import lcd\n    from unit import get\n    import cardkb\n\n    cardkb.begin()\n    lcd.clear()  # Esborra la pantalla abans de mostrar el prompt\n    lcd.print('\\n' + prompt + '\\n', 0, 0)\n\n    input_str = \"\"\n    while True:\n        key = cardkb.getKey()\n        if key:\n            key_code = ord(key)\n            if key_code == 13 or key_code == 10:  # ENTER\n                break\n            elif key_code == 8:  # BACKSPACE\n                input_str = input_str[:-1]\n            else:\n                input_str += key\n            lcd.print('\\r' + prompt + '\\n' + input_str + ' ', 0, 0)\n        time.sleep(0.05)\n\n    try:\n        return float(input_str)\n    except:\n        return 0.0","members":[{"name":"__init__","note":{},"label":{"en":"%1 init"},"params":[],"return":"","source":"        pass","ast_return":{"code":null,"id":null},"doc_return":null},{"name":"prompt_input_number","note":{},"label":{"en":"prompt_input_number %1 %2"},"params":[{"name":"prompt","type":"str","default":"","note":{},"field":""}],"return":"","source":"        return prompt_input_number_impl(prompt)","ast_return":{"code":"prompt_input_number_impl(prompt)","id":"float"},"doc_return":null}],"python_file_name":"promptinputnumber"},"pyCode":"\n\"\"\"\nfile     PromptInputNUMBER\ntime     2025-06-06\nauthor   Neus Morlà Arias\nemail   neus.morla.arias@gmail.com\nlicense  MIT License\n\"\"\"\n\ndef prompt_input_number_impl(prompt):\n    import time\n    from m5stack import lcd\n    from unit import get\n    import cardkb\n\n    cardkb.begin()\n    lcd.clear()  # Esborra la pantalla abans de mostrar el prompt\n    lcd.print('\\n' + prompt + '\\n', 0, 0)\n\n    input_str = \"\"\n    while True:\n        key = cardkb.getKey()\n        if key:\n            key_code = ord(key)\n            if key_code == 13 or key_code == 10:  # ENTER\n                break\n            elif key_code == 8:  # BACKSPACE\n                input_str = input_str[:-1]\n            else:\n                input_str += key\n            lcd.print('\\r' + prompt + '\\n' + input_str + ' ', 0, 0)\n        time.sleep(0.05)\n\n    try:\n        return float(input_str)\n    except:\n        return 0.0\n\nclass PromptInputNUMBER:\n    \"\"\"\n    note:\n        en: ''\n    details:\n        color: '#66d20f'\n        link: https://github.com/neusmstack\n        image: ''\n        category: Custom\n    example: ''\n    \"\"\"\n\n\n\n\n    def __init__(self):\n        \"\"\"\n        label:\n            en: '%1 init'\n        \"\"\"\n        pass\n\n    def prompt_input_number(self, prompt: str) -> float:\n        \"\"\"\n        label:\n            en: prompt_input_number %1 %2\n        params:\n            prompt:\n                name: prompt\n                type: str\n        \"\"\"\n        return prompt_input_number_impl(prompt)\n\n\n","version":"alpha2"}