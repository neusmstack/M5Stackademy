{"version":"V2.0","versionNumber":"V2.2.5","type":"core2","components":[{"name":"screen","type":"screen","layer":0,"screenId":"builtin","screenName":"","id":"__core2_screen","createTime":1745947316944,"x":0,"y":0,"width":320,"height":240,"backgroundColor":"#222222","size":0,"isSelected":true},{"name":"label0","type":"label","layer":null,"screenId":"builtin","screenName":"","id":"i^KdTP9#`F=1UWp*","createTime":1745970045604,"x":105,"y":143,"color":"#ffffff","backgroundColor":"#222222","text":"label0","engine":"gfx","font":"Widgets.FONTS.DejaVu18","rotation":0,"isSelected":false,"width":58,"height":21}],"resources":[{"hardware":["hardware_button","hardware_pin_button","imu","speaker","touch","mic","i2c"]},{"unit":["unit_cardkb"]}],"units":[{"type":"unit_cardkb","name":"cardkb_0","portList":["A","PAHUB","Custom"],"portType":"A","userPort":[22,21],"id":"tTi0X3u!^H0s%00Q","createTime":1745966964220,"bus":"i2c0","pahubPortList":[0,1,2,3,4,5],"pahubPort":0,"initBlockId":"!7G`CSH1429U@z.btls#"}],"hats":[],"bases":[],"i2cs":[{"id":"i2c0","portType":"A","userPort":[22,21],"freq":"100000","blockId":",f[K+ol|nN2xxLA|-06V"}],"blockly":"<variables><variable id=\"WbbE8xRr(YWcB)*`*Ga{\">text</variable><variable id=\"%xI*72gpvPBSsQ-X3:tk\">text2</variable></variables><block type=\"basic_on_loop\" id=\"loop_block\" deletable=\"false\" x=\"550\" y=\"30\"><mutation isUpdate=\"true\"></mutation><field name=\"UPDATEOP\">true</field><statement name=\"FUNC\"><block type=\"system_m5_update\" id=\"system_m5_update\"><next><block type=\"unit_cardkb_tick\" id=\"v-sdfIfr|3Ws;Zl*ZA_c\"><field name=\"NAME\">cardkb_0</field></block></next></block></statement></block><block type=\"basic_on_setup\" id=\"setup_block\" deletable=\"false\" x=\"98\" y=\"59\"><mutation isBegin=\"true\"></mutation><field name=\"UPDATEOP\">true</field><statement name=\"FUNC\"><block type=\"system_m5_begin\" id=\"system_m5_begin\"><next><block type=\"i2c_init\" id=\",f[K+ol|nN2xxLA|-06V\"><field name=\"NAME\">0</field><field name=\"FREQ\">100000</field><value name=\"SCL\"><shadow type=\"math_number\" id=\"vLKp@,_]3N*+RGQFDqS_\"><mutation max=\"Infinity\" min=\"-Infinity\" precision=\"0\"></mutation><field name=\"NUM\">33</field></shadow></value><value name=\"SDA\"><shadow type=\"math_number\" id=\"ke806uM$14Z$7!p;tXAN\"><mutation max=\"Infinity\" min=\"-Infinity\" precision=\"0\"></mutation><field name=\"NUM\">32</field></shadow></value><next><block type=\"unit_cardkb_init\" id=\"!7G`CSH1429U@z.btls#\"><field name=\"NAME\">cardkb_0</field><next><block type=\"set_screen_color_multiple\" id=\"@v}`6peedDFJ#h)eO8Oz\"><field name=\"SCREEN\">builtin</field><value name=\"COLOR\"><block type=\"color_rgb_palette\" id=\"(uJ7^MS`@}4Bz/uBl5dP\"><mutation mode=\"palette\"></mutation><field name=\"MODE\">palette</field><field name=\"COLOR\">#ffffff</field></block></value><next><block type=\"ui_lcd_start_write\" id=\")SEfs^TLtNZKp~sxp:p~\"><next><block type=\"ui_lcd_set_cursor\" id=\"IB/:u@WgLh=_paH=GNC#\"><value name=\"X\"><shadow type=\"math_number\" id=\";[+4:J|h%KbmQOM8pQBu\"><mutation max=\"Infinity\" min=\"-Infinity\" precision=\"0\"></mutation><field name=\"NUM\">10</field></shadow></value><value name=\"Y\"><shadow type=\"math_number\" id=\"DpnHAaKM}c2*b%`[VbAx\"><mutation max=\"Infinity\" min=\"-Infinity\" precision=\"0\"></mutation><field name=\"NUM\">40</field></shadow></value><next><block type=\"ui_lcd_set_text_size\" id=\".Z1S_U6v~[3mpAfX2z[r\"><value name=\"VALUE\"><shadow type=\"math_number\" id=\"K|b`O*o(m!xv$6VEp0.1\"><mutation max=\"Infinity\" min=\"-Infinity\" precision=\"0\"></mutation><field name=\"NUM\">2</field></shadow></value><next><block type=\"ui_lcd_print\" id=\"kepAZWdE%?OW[cLK%K8e\"><value name=\"VALUE\"><shadow type=\"text\" id=\",IJ[JjxWN9BR*NiiM-OC\"><field name=\"TEXT\">&gt;&gt;</field></shadow></value><value name=\"COLOR\"><block type=\"color_rgb_palette\" id=\".Ri~^[8wfKi23tFrt.)}\"><mutation mode=\"palette\"></mutation><field name=\"MODE\">palette</field><field name=\"COLOR\">#000000</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"unit_cardkb_callback\" id=\"KZN[92~g$PD6uxGCb*ub\" x=\"110\" y=\"410\"><field name=\"NAME\">cardkb_0</field><statement name=\"FUNC\"><block type=\"variables_set\" id=\"svXse9*qu_=fo}jYvO$A\"><field name=\"VAR\" id=\"WbbE8xRr(YWcB)*`*Ga{\">text</field><value name=\"VALUE\"><block type=\"unit_cardkb_get_string\" id=\",m}t2MpGtx=w/F003kgz\"><field name=\"NAME\">cardkb_0</field></block></value><next><block type=\"ui_lcd_printf\" id=\"|37`;`{Kz3B#-0y.VKo!\"><value name=\"VALUE\"><shadow type=\"text\" id=\"LJl2#MjSbEtWW;?EGZ6Y\"><field name=\"TEXT\">hello M5</field></shadow><block type=\"variables_get\" id=\"_*lK*InJ3b4U|zwn70=8\"><field name=\"VAR\" id=\"WbbE8xRr(YWcB)*`*Ga{\">text</field></block></value><next><block type=\"variables_set\" id=\"mYeF1Zc(M~!oU{k~ABuk\"><field name=\"VAR\" id=\"%xI*72gpvPBSsQ-X3:tk\">text2</field><value name=\"VALUE\"><block type=\"text_chr\" id=\"!Si?D/eUyFF2G.q5nnsp\"><value name=\"VALUE\"><shadow type=\"math_number\" id=\"j35J?Id]RWC{KxXu5Yb5\"><mutation max=\"Infinity\" min=\"-Infinity\" precision=\"0\"></mutation><field name=\"NUM\">65</field></shadow><block type=\"variables_get\" id=\"KM58)tAz`{szedAmEz1N\"><field name=\"VAR\" id=\"WbbE8xRr(YWcB)*`*Ga{\">text</field></block></value></block></value><next><block type=\"label_set_text\" id=\"^dY)RI+Ie*)QVkeQA[-~\"><field name=\"NAME\">label0</field><value name=\"TEXT\"><shadow type=\"text\" id=\"ehY1dw4yP;vP6Zo/eaGc\"><field name=\"TEXT\">Label</field></shadow><block type=\"variables_get\" id=\"se|^CFKHKzN):J`l*Ueq\"><field name=\"VAR\" id=\"%xI*72gpvPBSsQ-X3:tk\">text2</field></block></value></block></next></block></next></block></next></block></statement></block><block type=\"variables_get\" id=\"yBT;#b2-QM4T~Z#?V;9X\" disabled=\"true\" x=\"363\" y=\"613\"><field name=\"VAR\" id=\"WbbE8xRr(YWcB)*`*Ga{\">text</field></block><block type=\"variables_get\" id=\"HUPN!nGUE6;q!7XAyO0y\" disabled=\"true\" x=\"400\" y=\"617\"><field name=\"VAR\" id=\"WbbE8xRr(YWcB)*`*Ga{\">text</field></block>","screen":[{"simulationName":"Built-in","type":"builtin","width":320,"height":240,"scale":0.78,"screenName":"","blockId":"","screenColorType":0,"id":"builtin","createTime":1745947316944}],"logicWhenNum":0,"customList":[{"id":"custom_ascii_text","name":"ascii_text","color":"#4e0fd2","blockly":"const CUSTOM_ASCII_TEXT_LANGUAGES = {\n  \"CUSTOM_ASCII_TEXT_INIT\": {\n    \"en\": \"%1 init, input_string: %2\"\n  },\n  \"CUSTOM_ASCII_TEXT_ASK_INPUT\": {\n    \"en\": \" %1 ask_input, prompt: %2\"\n  },\n  \"CUSTOM_ASCII_TEXT_SHOW_RESULTS\": {\n    \"en\": \" %1 show_results\"\n  },\n  \"CUSTOM_ASCII_TEXT_UPDATE_LABEL\": {\n    \"en\": \"%1 %2 update text on lcd\"\n  }\n};\n\nconst initType = 'custom_ascii_text_init';\nBlockly.BlockRegExpList['custom_ascii_text'] = {\n  regexp: new RegExp(/^custom_ascii_text_/),\n  code: \"from ascii_text import ascii_text\",\n  initBlockType: initType,\n  categoryId: 'custom_ascii_text',\n}\nBlockly.utils.registerLanguages(CUSTOM_ASCII_TEXT_LANGUAGES)\n\nBlockly.Msg.CUSTOM_ASCII_TEXT_HUE = '#4e0fd2'\nBlockly.Msg.CUSTOM_ASCII_TEXT = 'ascii_text'\n\nBlockly.utils.getcustom_ascii_textOptions = function() {\n  let options = [];\n  let list = Blockly.utils.getCustomNameList(initType);\n  for (let i = 0; i < list.length; i++) {\n    let value = list[i];\n    options.push([String(value), String(value)]);\n  }\n  if (options.length === 0) return [\n    ['ascii_text_0', 'ascii_text_0']\n  ];\n  return options;\n}\n\n\nBlockly.Blocks[\"custom_ascii_text_init\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_ASCII_TEXT_INIT,\n      'args0': [\n        // { 'type': 'field_dropdown', 'name': 'NAME', 'options': Blockly.utils.getcustom_ascii_textOptions },\n        {\n          'type': 'field_input',\n          'name': 'NAME',\n          'text': 'ascii_text_0'\n        },\n        {\n          'type': 'input_value',\n          'name': 'input_string'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#4e0fd2\",\n      \"tool\": []\n    };\n  }\n}\n\nBlockly.Python[\"custom_ascii_text_init\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var input_string = Blockly.Python.valueToCode(block, 'input_string', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname} = ascii_text(${input_string})\\n`\n}\n\nBlockly.Blocks[\"custom_ascii_text_ask_input\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_ASCII_TEXT_ASK_INPUT,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_ascii_textOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'prompt'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#4e0fd2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_ascii_text_ask_input\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var prompt = Blockly.Python.valueToCode(block, 'prompt', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.ask_input(${prompt})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_ascii_text_show_results\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_ASCII_TEXT_SHOW_RESULTS,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_ascii_textOptions\n        },\n\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#4e0fd2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_ascii_text_show_results\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return [`${varname}.show_results()`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_ascii_text_update_label\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_ASCII_TEXT_UPDATE_LABEL,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_ascii_textOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'input_string'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#4e0fd2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_ascii_text_update_label\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var input_string = Blockly.Python.valueToCode(block, 'input_string', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.update_label(${input_string})\\n`\n}","toolbox":"\n<category name=\"ascii_text\" colour=\"#4e0fd2\" hidden=\"true\" toolboxitemid=\"custom_ascii_text\">\n<title text=\"ascii_text\" docsLink=\"\"></title>\n<block type=\"custom_ascii_text_init\">\n  <value name=\"input_string\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">Test of operating system</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_ascii_text_ask_input\">\n  <value name=\"prompt\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">Write something</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_ascii_text_show_results\"/><block type=\"custom_ascii_text_update_label\">\n  <value name=\"input_string\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block>\n</category>\n","pyCode":"\n\"\"\"\nfile     ascii_text\ntime     2025-04-29\nauthor   Neus Morla\nemail   neusmstack@gmail.com\nlicense  MIT License\n\"\"\"\n\nfrom M5Stack import M5\ndef setup():\n    # Inicialització del M5Stack i configuració de la pantalla\n    M5.begin()\n    M5.lcd.fillScreen(0xFFFFFF)  # Neteja la pantalla i la posa de color blanc\n    M5.lcd.setTextColor(0x000000)  # Configura el color del text a negre\n\n    # Inicialitzar l'objecte ascii_text sense label (ja no necessitem label0)\n    ascii_text_0 = ascii_text(input_string=\"Test of operating system\")\n\n    # Mostrar el símbol '>>' per indicar que es pot començar a escriure\n    M5.lcd.setCursor(0, 40)  # Posicionar el cursor per mostrar '>>'\n    M5.lcd.print(\">>\")  # Mostrar el símbol '>>' per començar\n\n    # Inicialitzar la CardKB\n    # Si la CardKB es detecta correctament, es mostra el símbol '>>' en la pantalla\n    ascii_text_0.update_label(\">>\")\n\n    return ascii_text_0\ndef loop():\n    global ascii_text_0\n\n    # Obtenir la resposta de l'usuari (assumint que estàs utilitzant el teclat configurat per UiFlow)\n    input_txt = ascii_text_0.ask_input('Write something')\n\n    # Mostrar el resultat a la pantalla amb lcd.setCursor() per evitar el desbordament de text\n    ascii_text_0.update_label(input_txt)\n\n    # Mostrar els resultats processats\n    result = ascii_text_0.show_results()\n    ascii_text_0.update_label(result)\nif __name__ == '__main__':\n    try:\n        ascii_text_0 = setup()\n\n        while True:\n            loop()\n\n    except (Exception, KeyboardInterrupt) as e:\n        try:\n            from utility import print_error_msg\n            print_error_msg(e)\n        except ImportError:\n            print(\"please update to latest firmware\")\n\nclass ascii_text:\n    \"\"\"\n    note:\n        en: ''\n    details:\n        color: '#4e0fd2'\n        link: ''\n        image: ''\n        category: Custom\n    example: ''\n    \"\"\"\n\n\n\n\n    def __init__(self, input_string: str = 'Test of operating system'):\n        \"\"\"\n        label:\n            en: '%1 init, input_string: %2'\n        params:\n            input_string:\n                name: input_string\n                type: str\n                default: Test of operating system\n        \"\"\"\n        self.input_string = input_string  # Guarda l'entrada per començar la frase\n\n    def ask_input(self, prompt: str = 'Write something') -> str:\n        \"\"\"\n        label:\n            en: ' %1 ask_input, prompt: %2'\n        params:\n            prompt:\n                name: prompt\n                type: str\n                default: Write something\n        \"\"\"\n        input_text = \"\"\n        M5.lcd.setCursor(0, 40)  # Col·locar el cursor a una nova línia a la pantalla\n        M5.lcd.print(prompt)  # Mostrar el prompt a la pantalla\n\n        while True:\n            M5.update()\n            key = M5.readKey()  # Obtenir la tecla premuda mitjançant UiFlow\n            if key:\n                if key == '\\r':  # Enter key\n                    break\n                elif key == '\\b':  # Backspace key\n                    input_text = input_text[:-1]\n                else:\n                    input_text += key\n                M5.lcd.setCursor(0, 60)  # Reposicionar el cursor per a actualitzar el text\n                M5.lcd.print(input_text)  # Actualitzar el text a la pantalla\n\n        self.input_string = input_text\n        return self.input_string\n\n    def show_results(self):\n        \"\"\"\n        label:\n            en: ' %1 show_results'\n        \"\"\"\n        # Convertir el codi ASCII a caràcter abans de retornar-lo\n        return ''.join([chr(int(char)) if char.isdigit() else char for char in self.input_string])\n\n    def update_label(self, input_string: str):\n        \"\"\"\n        label:\n            en: '%1 %2 update text on lcd'\n        params:\n            input_string:\n                name: input_string\n                type: str\n        \"\"\"\n        M5.lcd.setCursor(0, 80)  # Reposicionar el cursor\n        M5.lcd.print(input_string)  # Actualitza el text a la pantalla\n\n\n"}]}