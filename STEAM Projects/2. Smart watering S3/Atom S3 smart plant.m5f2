{"version":"V2.0","versionNumber":"V2.2.6","type":"atoms3","components":[{"name":"screen","type":"screen","layer":0,"screenId":"builtin","screenName":"","id":"__atoms3_screen","createTime":1746115789828,"x":0,"y":0,"width":128,"height":128,"backgroundColor":"#000000","size":0,"isSelected":true},{"name":"label0","type":"label","layer":1,"screenId":"builtin","screenName":"","id":"fT-8F%7rNrpkl*Vp","createTime":1746115835151,"x":8,"y":50,"color":"#ffffff","backgroundColor":"#222222","text":"label0","engine":"gfx","font":"Widgets.FONTS.DejaVu12","rotation":0,"isSelected":false,"width":42,"height":15},{"name":"label1","type":"label","layer":2,"screenId":"builtin","screenName":"","id":"gpX4310y$V97E52C","createTime":1746182504151,"x":58,"y":50,"color":"#ffffff","backgroundColor":"#222222","text":"label1","engine":"gfx","font":"Widgets.FONTS.DejaVu12","rotation":0,"isSelected":false,"width":42,"height":15}],"resources":[{"hardware":["hardware_button","hardware_pin_button","imu","ir"]},{"unit":["unit_watering"]}],"units":[{"type":"unit_watering","name":"watering_0","portList":["A","B","C","Custom"],"portType":"A","userPort":[22,21],"id":"x0Kx@UjQx3!w%a%x","createTime":1746182435478,"initBlockId":"k]#JzL:7~-.GRXP!6y2c"}],"hats":[],"bases":[],"i2cs":[],"blockly":"<block type=\"basic_on_setup\" id=\"setup_block\" deletable=\"false\" x=\"50\" y=\"-90\"><mutation isBegin=\"true\"></mutation><field name=\"UPDATEOP\">true</field><statement name=\"FUNC\"><block type=\"system_m5_begin\" id=\"system_m5_begin\"><next><block type=\"unit_watering_init\" id=\"k]#JzL:7~-.GRXP!6y2c\"><field name=\"NAME\">watering_0</field></block></next></block></statement></block><block type=\"basic_on_loop\" id=\"loop_block\" deletable=\"false\" x=\"391\" y=\"-70\"><mutation isUpdate=\"true\"></mutation><field name=\"UPDATEOP\">true</field><statement name=\"FUNC\"><block type=\"system_m5_update\" id=\"system_m5_update\"><next><block type=\"label_set_text\" id=\"/.,Uy!SRRzn6{D:pnzoZ\"><field name=\"NAME\">label0</field><value name=\"TEXT\"><shadow type=\"text\" id=\"DH!OHG*aJj=7cjcL/e/B\"><field name=\"TEXT\">Label</field></shadow><block type=\"unit_watering_get_raw\" id=\"V]=c(0.;Ke)`.VayaFJ)\"><field name=\"NAME\">watering_0</field></block></value><next><block type=\"controls_ifelse\" id=\"J+imhHla$sWLB/A`umg6\"><value name=\"IF0\"><block type=\"logic_compare\" id=\"i=xETp;D5Zg,UjEawR37\"><field name=\"OP\">GT</field><value name=\"A\"><block type=\"unit_watering_get_raw\" id=\"GLd0WrHPdS`PD1X)2u8q\"><field name=\"NAME\">watering_0</field></block></value><value name=\"B\"><block type=\"math_number\" id=\"[cQge-LXU?ELmCJkHu,1\"><mutation max=\"Infinity\" min=\"-Infinity\" precision=\"0\"></mutation><field name=\"NUM\">30500</field></block></value></block></value><statement name=\"DO0\"><block type=\"set_screen_color_multiple\" id=\"w5zak0fgGgUUr*t;UsKQ\"><field name=\"SCREEN\">builtin</field><value name=\"COLOR\"><block type=\"color_rgb_palette\" id=\"_u%uOW.rjp5yi?TI[*zw\"><mutation mode=\"palette\"></mutation><field name=\"MODE\">palette</field><field name=\"COLOR\">#ff0000</field></block></value><next><block type=\"unit_watering_on\" id=\".Ij+ur72}f`33(Edlcqc\"><field name=\"NAME\">watering_0</field></block></next></block></statement><statement name=\"ELSE\"><block type=\"unit_watering_off\" id=\"+nMz6!XXpKM!95n:.QaE\"><field name=\"NAME\">watering_0</field><next><block type=\"set_screen_color_multiple\" id=\"l:uq%`|d,-;+kYt{,JVQ\"><field name=\"SCREEN\">builtin</field><value name=\"COLOR\"><block type=\"color_rgb_palette\" id=\"5=P{ap;e1M$gv83S|mZ-\"><mutation mode=\"palette\"></mutation><field name=\"MODE\">palette</field><field name=\"COLOR\">#009900</field></block></value><next><block type=\"unit_watering_off\" id=\"~?v}Uu.Z]`CAxkc*c$dP\"><field name=\"NAME\">watering_0</field></block></next></block></next></block></statement></block></next></block></next></block></statement></block>","screen":[{"simulationName":"Built-in","type":"builtin","width":128,"height":128,"scale":1.3,"screenName":"","blockId":"","screenColorType":0,"id":"builtin","createTime":1746115789827}],"logicWhenNum":0,"customList":[{"id":"custom_ascii_text","name":"ascii_text","color":"#4e0fd2","blockly":"const CUSTOM_ASCII_TEXT_LANGUAGES = {\n  \"CUSTOM_ASCII_TEXT_INIT\": {\n    \"en\": \"%1 init, input_string: %2\"\n  },\n  \"CUSTOM_ASCII_TEXT_ASK_INPUT\": {\n    \"en\": \" %1 ask_input, prompt: %2\"\n  },\n  \"CUSTOM_ASCII_TEXT_SHOW_RESULTS\": {\n    \"en\": \" %1 show_results\"\n  },\n  \"CUSTOM_ASCII_TEXT_UPDATE_LABEL\": {\n    \"en\": \"%1 %2 update text on lcd\"\n  }\n};\n\nconst initType = 'custom_ascii_text_init';\nBlockly.BlockRegExpList['custom_ascii_text'] = {\n  regexp: new RegExp(/^custom_ascii_text_/),\n  code: \"from ascii_text import ascii_text\",\n  initBlockType: initType,\n  categoryId: 'custom_ascii_text',\n}\nBlockly.utils.registerLanguages(CUSTOM_ASCII_TEXT_LANGUAGES)\n\nBlockly.Msg.CUSTOM_ASCII_TEXT_HUE = '#4e0fd2'\nBlockly.Msg.CUSTOM_ASCII_TEXT = 'ascii_text'\n\nBlockly.utils.getcustom_ascii_textOptions = function() {\n  let options = [];\n  let list = Blockly.utils.getCustomNameList(initType);\n  for (let i = 0; i < list.length; i++) {\n    let value = list[i];\n    options.push([String(value), String(value)]);\n  }\n  if (options.length === 0) return [\n    ['ascii_text_0', 'ascii_text_0']\n  ];\n  return options;\n}\n\n\nBlockly.Blocks[\"custom_ascii_text_init\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_ASCII_TEXT_INIT,\n      'args0': [\n        // { 'type': 'field_dropdown', 'name': 'NAME', 'options': Blockly.utils.getcustom_ascii_textOptions },\n        {\n          'type': 'field_input',\n          'name': 'NAME',\n          'text': 'ascii_text_0'\n        },\n        {\n          'type': 'input_value',\n          'name': 'input_string'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#4e0fd2\",\n      \"tool\": []\n    };\n  }\n}\n\nBlockly.Python[\"custom_ascii_text_init\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var input_string = Blockly.Python.valueToCode(block, 'input_string', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname} = ascii_text(${input_string})\\n`\n}\n\nBlockly.Blocks[\"custom_ascii_text_ask_input\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_ASCII_TEXT_ASK_INPUT,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_ascii_textOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'prompt'\n        },\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#4e0fd2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_ascii_text_ask_input\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var prompt = Blockly.Python.valueToCode(block, 'prompt', Blockly.Python.ORDER_FUNCTION_CALL);\n  return [`${varname}.ask_input(${prompt})`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_ascii_text_show_results\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_ASCII_TEXT_SHOW_RESULTS,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_ascii_textOptions\n        },\n\n      ],\n      'output': null,\n      'inputsInline': true,\n      'colour': \"#4e0fd2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_ascii_text_show_results\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n\n  return [`${varname}.show_results()`, Blockly.Python.ORDER_NONE]\n}\n\nBlockly.Blocks[\"custom_ascii_text_update_label\"] = {\n  init: function() {\n    this.jsonInit(this._init());\n  },\n  _init: function() {\n    return {\n      'message0': Blockly.Msg.CUSTOM_ASCII_TEXT_UPDATE_LABEL,\n      'args0': [{\n          'type': 'field_dropdown',\n          'name': 'NAME',\n          'options': Blockly.utils.getcustom_ascii_textOptions\n        },\n        {\n          'type': 'input_value',\n          'name': 'input_string'\n        },\n      ],\n      'previousStatement': null,\n      'nextStatement': null,\n      'inputsInline': true,\n      'colour': \"#4e0fd2\",\n    };\n  }\n}\n\nBlockly.Python[\"custom_ascii_text_update_label\"] = function(block) {\n  var varname = block.getFieldValue('NAME') || '_';\n  var input_string = Blockly.Python.valueToCode(block, 'input_string', Blockly.Python.ORDER_FUNCTION_CALL);\n  return `${varname}.update_label(${input_string})\\n`\n}","toolbox":"\n<category name=\"ascii_text\" colour=\"#4e0fd2\" hidden=\"true\" toolboxitemid=\"custom_ascii_text\">\n<title text=\"ascii_text\" docsLink=\"\"></title>\n<block type=\"custom_ascii_text_init\">\n  <value name=\"input_string\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">Test of operating system</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_ascii_text_ask_input\">\n  <value name=\"prompt\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\">Write something</field>\n    </shadow>\n  </value>\n</block><block type=\"custom_ascii_text_show_results\"/><block type=\"custom_ascii_text_update_label\">\n  <value name=\"input_string\">\n    <shadow type=\"text\">\n      <field name=\"TEXT\"/>\n    </shadow>\n  </value>\n</block>\n</category>\n","pyCode":"\n\"\"\"\nfile     ascii_text\ntime     2025-04-29\nauthor   Neus Morla\nemail   neusmstack@gmail.com\nlicense  MIT License\n\"\"\"\n\nfrom M5Stack import M5\ndef setup():\n    # Inicialització del M5Stack i configuració de la pantalla\n    M5.begin()\n    M5.lcd.fillScreen(0xFFFFFF)  # Neteja la pantalla i la posa de color blanc\n    M5.lcd.setTextColor(0x000000)  # Configura el color del text a negre\n\n    # Inicialitzar l'objecte ascii_text sense label (ja no necessitem label0)\n    ascii_text_0 = ascii_text(input_string=\"Test of operating system\")\n\n    # Mostrar el símbol '>>' per indicar que es pot començar a escriure\n    M5.lcd.setCursor(0, 40)  # Posicionar el cursor per mostrar '>>'\n    M5.lcd.print(\">>\")  # Mostrar el símbol '>>' per començar\n\n    # Inicialitzar la CardKB\n    # Si la CardKB es detecta correctament, es mostra el símbol '>>' en la pantalla\n    ascii_text_0.update_label(\">>\")\n\n    return ascii_text_0\ndef loop():\n    global ascii_text_0\n\n    # Obtenir la resposta de l'usuari (assumint que estàs utilitzant el teclat configurat per UiFlow)\n    input_txt = ascii_text_0.ask_input('Write something')\n\n    # Mostrar el resultat a la pantalla amb lcd.setCursor() per evitar el desbordament de text\n    ascii_text_0.update_label(input_txt)\n\n    # Mostrar els resultats processats\n    result = ascii_text_0.show_results()\n    ascii_text_0.update_label(result)\nif __name__ == '__main__':\n    try:\n        ascii_text_0 = setup()\n\n        while True:\n            loop()\n\n    except (Exception, KeyboardInterrupt) as e:\n        try:\n            from utility import print_error_msg\n            print_error_msg(e)\n        except ImportError:\n            print(\"please update to latest firmware\")\n\nclass ascii_text:\n    \"\"\"\n    note:\n        en: ''\n    details:\n        color: '#4e0fd2'\n        link: ''\n        image: ''\n        category: Custom\n    example: ''\n    \"\"\"\n\n\n\n\n    def __init__(self, input_string: str = 'Test of operating system'):\n        \"\"\"\n        label:\n            en: '%1 init, input_string: %2'\n        params:\n            input_string:\n                name: input_string\n                type: str\n                default: Test of operating system\n        \"\"\"\n        self.input_string = input_string  # Guarda l'entrada per començar la frase\n\n    def ask_input(self, prompt: str = 'Write something') -> str:\n        \"\"\"\n        label:\n            en: ' %1 ask_input, prompt: %2'\n        params:\n            prompt:\n                name: prompt\n                type: str\n                default: Write something\n        \"\"\"\n        input_text = \"\"\n        M5.lcd.setCursor(0, 40)  # Col·locar el cursor a una nova línia a la pantalla\n        M5.lcd.print(prompt)  # Mostrar el prompt a la pantalla\n\n        while True:\n            M5.update()\n            key = M5.readKey()  # Obtenir la tecla premuda mitjançant UiFlow\n            if key:\n                if key == '\\r':  # Enter key\n                    break\n                elif key == '\\b':  # Backspace key\n                    input_text = input_text[:-1]\n                else:\n                    input_text += key\n                M5.lcd.setCursor(0, 60)  # Reposicionar el cursor per a actualitzar el text\n                M5.lcd.print(input_text)  # Actualitzar el text a la pantalla\n\n        self.input_string = input_text\n        return self.input_string\n\n    def show_results(self):\n        \"\"\"\n        label:\n            en: ' %1 show_results'\n        \"\"\"\n        # Convertir el codi ASCII a caràcter abans de retornar-lo\n        return ''.join([chr(int(char)) if char.isdigit() else char for char in self.input_string])\n\n    def update_label(self, input_string: str):\n        \"\"\"\n        label:\n            en: '%1 %2 update text on lcd'\n        params:\n            input_string:\n                name: input_string\n                type: str\n        \"\"\"\n        M5.lcd.setCursor(0, 80)  # Reposicionar el cursor\n        M5.lcd.print(input_string)  # Actualitza el text a la pantalla\n\n\n"}]}